// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RDF.Arcana.API.Data;

#nullable disable

namespace RDF.Arcana.API.Migrations
{
    [DbContext(typeof(ArcanaDbContext))]
    [Migration("20240614032207_AddApproverSetupBasedOnRange")]
    partial class AddApproverSetupBasedOnRange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("arcana_hilo_sequence")
                .IncrementsBy(10);

            modelBuilder.Entity("ApproverByRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("max_value");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("min_value");

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("module_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_approver_by_range");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_approver_by_range_user_id");

                    b.ToTable("approver_by_range", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.AdvancePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_no");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<decimal>("AdvancePaymentAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("advance_payment_amount");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bank_name");

                    b.Property<decimal>("ChequeAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cheque_amount");

                    b.Property<DateTime>("ChequeDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("cheque_date");

                    b.Property<string>("ChequeNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cheque_no");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_received");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("origin");

                    b.Property<string>("Payee")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payee");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payment_method");

                    b.Property<int?>("PaymentTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("payment_transaction_id");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<decimal>("RemainingBalance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("remaining_balance");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_advance_payments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_advance_payments_added_by");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_advance_payments_client_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_advance_payments_modified_by");

                    b.HasIndex("PaymentTransactionId")
                        .HasDatabaseName("ix_advance_payments_payment_transaction_id");

                    b.ToTable("advance_payments", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Approval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApproverId")
                        .HasColumnType("int")
                        .HasColumnName("approver_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_approval");

                    b.HasIndex("ApproverId")
                        .HasDatabaseName("ix_approval_approver_id");

                    b.HasIndex("RequestId")
                        .HasDatabaseName("ix_approval_request_id");

                    b.ToTable("approval", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Approver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("module_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_approvers");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_approvers_user_id");

                    b.ToTable("approvers", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.BookingCoverages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<string>("BookingCoverage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("booking_coverage");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_booking_coverages");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_booking_coverages_added_by");

                    b.ToTable("booking_coverages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = 1,
                            BookingCoverage = "F1",
                            CreatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3853),
                            IsActive = true,
                            UpdatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3860)
                        },
                        new
                        {
                            Id = 2,
                            AddedBy = 1,
                            BookingCoverage = "F2",
                            CreatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3865),
                            IsActive = true,
                            UpdatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3866)
                        },
                        new
                        {
                            Id = 3,
                            AddedBy = 1,
                            BookingCoverage = "F3",
                            CreatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3867),
                            IsActive = true,
                            UpdatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3882)
                        },
                        new
                        {
                            Id = 4,
                            AddedBy = 1,
                            BookingCoverage = "F4",
                            CreatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3885),
                            IsActive = true,
                            UpdatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3886)
                        },
                        new
                        {
                            Id = 5,
                            AddedBy = 1,
                            BookingCoverage = "F5",
                            CreatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3887),
                            IsActive = true,
                            UpdatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3888)
                        });
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.BusinessAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "arcana_hilo_sequence");

                    b.Property<string>("Barangay")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("barangay");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("house_number");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("province");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("street_name");

                    b.HasKey("Id")
                        .HasName("pk_business_address");

                    b.ToTable("business_address", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.CdoCluster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClusterId")
                        .HasColumnType("int")
                        .HasColumnName("cluster_id");

                    b.Property<DateTime>("CreatesAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("creates_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_cdo_clusters");

                    b.HasIndex("ClusterId")
                        .HasDatabaseName("ix_cdo_clusters_cluster_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_cdo_clusters_user_id");

                    b.ToTable("cdo_clusters", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ClearedPayments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<int>("PaymentRecordId")
                        .HasColumnType("int")
                        .HasColumnName("payment_record_id");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cleared_payments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_cleared_payments_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_cleared_payments_modified_by");

                    b.HasIndex("PaymentRecordId")
                        .IsUnique()
                        .HasDatabaseName("ix_cleared_payments_payment_record_id");

                    b.ToTable("cleared_payments", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ClientDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("document_path");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("document_type");

                    b.HasKey("Id")
                        .HasName("pk_client_documents");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_documents_client_id");

                    b.ToTable("client_documents", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ClientModeOfPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("ModeOfPaymentId")
                        .HasColumnType("int")
                        .HasColumnName("mode_of_payment_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_client_mode_of_payments");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_mode_of_payments_client_id");

                    b.HasIndex("ModeOfPaymentId")
                        .HasDatabaseName("ix_client_mode_of_payments_mode_of_payment_id");

                    b.ToTable("client_mode_of_payments", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Clients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "arcana_hilo_sequence");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<int?>("BookingCoverageId")
                        .HasColumnType("int")
                        .HasColumnName("booking_coverage_id");

                    b.Property<int?>("BusinessAddressId")
                        .HasColumnType("int")
                        .HasColumnName("business_address_id");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("business_name");

                    b.Property<int?>("ClusterId")
                        .HasColumnType("int")
                        .HasColumnName("cluster_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("customer_type");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<bool?>("DirectDelivery")
                        .HasColumnType("bit")
                        .HasColumnName("direct_delivery");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discount_id");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_address");

                    b.Property<int?>("FixedDiscountId")
                        .HasColumnType("int")
                        .HasColumnName("fixed_discount_id");

                    b.Property<int?>("FreezerId")
                        .HasColumnType("int")
                        .HasColumnName("freezer_id");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("longitude");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("origin");

                    b.Property<int>("OwnersAddressId")
                        .HasColumnType("int")
                        .HasColumnName("owners_address_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<int?>("PriceModeId")
                        .HasColumnType("int")
                        .HasColumnName("price_mode_id");

                    b.Property<string>("RegistrationStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("registration_status");

                    b.Property<string>("RepresentativeName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("representative_name");

                    b.Property<string>("RepresentativePosition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("representative_position");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<int?>("StoreTypeId")
                        .HasColumnType("int")
                        .HasColumnName("store_type_id");

                    b.Property<int?>("TermDays")
                        .HasColumnType("int")
                        .HasColumnName("term_days");

                    b.Property<int?>("Terms")
                        .HasColumnType("int")
                        .HasColumnName("terms");

                    b.Property<string>("TinNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tin_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<bool?>("VariableDiscount")
                        .HasColumnType("bit")
                        .HasColumnName("variable_discount");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_clients_added_by");

                    b.HasIndex("BookingCoverageId")
                        .HasDatabaseName("ix_clients_booking_coverage_id");

                    b.HasIndex("BusinessAddressId")
                        .HasDatabaseName("ix_clients_business_address_id");

                    b.HasIndex("ClusterId")
                        .HasDatabaseName("ix_clients_cluster_id");

                    b.HasIndex("FixedDiscountId")
                        .HasDatabaseName("ix_clients_fixed_discount_id");

                    b.HasIndex("FreezerId")
                        .HasDatabaseName("ix_clients_freezer_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_clients_modified_by");

                    b.HasIndex("OwnersAddressId")
                        .HasDatabaseName("ix_clients_owners_address_id");

                    b.HasIndex("PriceModeId")
                        .HasDatabaseName("ix_clients_price_mode_id");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_request_id")
                        .HasFilter("[request_id] IS NOT NULL");

                    b.HasIndex("StoreTypeId")
                        .HasDatabaseName("ix_clients_store_type_id");

                    b.HasIndex("Terms")
                        .HasDatabaseName("ix_clients_terms");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Cluster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClusterType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cluster_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_clusters");

                    b.ToTable("clusters", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_added_by");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_departments_added_by");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("DiscountType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("discount_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_discounts");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_discounts_added_by");

                    b.ToTable("discounts", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Expenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_expenses");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_expenses_added_by");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_expenses_client_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_expenses_modified_by");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasDatabaseName("ix_expenses_request_id");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ExpensesRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("ExpensesId")
                        .HasColumnType("int")
                        .HasColumnName("expenses_id");

                    b.Property<bool>("IsOneTime")
                        .HasColumnType("bit")
                        .HasColumnName("is_one_time");

                    b.Property<int>("OtherExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("other_expense_id");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_expenses_requests");

                    b.HasIndex("ExpensesId")
                        .HasDatabaseName("ix_expenses_requests_expenses_id");

                    b.HasIndex("OtherExpenseId")
                        .HasDatabaseName("ix_expenses_requests_other_expense_id");

                    b.ToTable("expenses_requests", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FixedDiscounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "arcana_hilo_sequence");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("discount_percentage");

                    b.HasKey("Id")
                        .HasName("pk_fixed_discounts");

                    b.ToTable("fixed_discounts", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FreebieItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FreebieRequestId")
                        .HasColumnType("int")
                        .HasColumnName("freebie_request_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_freebie_items");

                    b.HasIndex("FreebieRequestId")
                        .HasDatabaseName("ix_freebie_items_freebie_request_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_freebie_items_item_id");

                    b.ToTable("freebie_items", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FreebieRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "arcana_hilo_sequence");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("ESignaturePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("e_signature_path");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit")
                        .HasColumnName("is_delivered");

                    b.Property<string>("PhotoProofPath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("photo_proof_path");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int")
                        .HasColumnName("requested_by");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_freebie_requests");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_freebie_requests_client_id");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasDatabaseName("ix_freebie_requests_request_id")
                        .HasFilter("[request_id] IS NOT NULL");

                    b.HasIndex("RequestedBy")
                        .HasDatabaseName("ix_freebie_requests_requested_by");

                    b.ToTable("freebie_requests", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Freezer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "arcana_hilo_sequence");

                    b.Property<string>("AssetTag")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("asset_tag");

                    b.HasKey("Id")
                        .HasName("pk_freezers");

                    b.ToTable("freezers", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ItemPriceChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("EffectivityDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("effectivity_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("PriceModeItemId")
                        .HasColumnType("int")
                        .HasColumnName("price_mode_item_id");

                    b.HasKey("Id")
                        .HasName("pk_item_price_changes");

                    b.HasIndex("PriceModeItemId")
                        .HasDatabaseName("ix_item_price_changes_price_mode_item_id");

                    b.ToTable("item_price_changes", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("ItemCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("item_code");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("item_description");

                    b.Property<string>("ItemImageLink")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("item_image_link");

                    b.Property<int>("MeatTypeId")
                        .HasColumnType("int")
                        .HasColumnName("meat_type_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modified_by");

                    b.Property<int>("ProductSubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("product_sub_category_id");

                    b.Property<int>("UomId")
                        .HasColumnType("int")
                        .HasColumnName("uom_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_items_added_by");

                    b.HasIndex("MeatTypeId")
                        .HasDatabaseName("ix_items_meat_type_id");

                    b.HasIndex("ProductSubCategoryId")
                        .HasDatabaseName("ix_items_product_sub_category_id");

                    b.HasIndex("UomId")
                        .HasDatabaseName("ix_items_uom_id");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ListingFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("approval_date");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CratedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("crated_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit")
                        .HasColumnName("is_delivered");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int")
                        .HasColumnName("requested_by");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("total");

                    b.HasKey("Id")
                        .HasName("pk_listing_fees");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_listing_fees_client_id");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasDatabaseName("ix_listing_fees_request_id");

                    b.HasIndex("RequestedBy")
                        .HasDatabaseName("ix_listing_fees_requested_by");

                    b.ToTable("listing_fees", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ListingFeeItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("ListingFeeId")
                        .HasColumnType("int")
                        .HasColumnName("listing_fee_id");

                    b.Property<int>("Sku")
                        .HasColumnType("int")
                        .HasColumnName("sku");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unit_cost");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_listing_fee_items");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_listing_fee_items_item_id");

                    b.HasIndex("ListingFeeId")
                        .HasDatabaseName("ix_listing_fee_items_listing_fee_id");

                    b.ToTable("listing_fee_items", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_name");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_locations_added_by");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.MeatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("MeatTypeName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("meat_type_name");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_meat_types");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_meat_types_added_by");

                    b.ToTable("meat_types", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ModeOfPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Payment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payment");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_mode_of_payments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_mode_of_payments_added_by");

                    b.ToTable("mode_of_payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = 1,
                            CreatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3992),
                            IsActive = true,
                            Payment = "Cash",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AddedBy = 1,
                            CreatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3996),
                            IsActive = true,
                            Payment = "Online/Check",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClusterId")
                        .HasColumnType("int")
                        .HasColumnName("cluster_id");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notifications_user_id");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.OnlinePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_no");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("OnlinePaymentName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("online_payment_name");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("payment_amount");

                    b.Property<int?>("PaymentRecordId")
                        .HasColumnType("int")
                        .HasColumnName("payment_record_id");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reference_number");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_online_payments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_online_payments_added_by");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_online_payments_client_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_online_payments_modified_by");

                    b.HasIndex("PaymentRecordId")
                        .HasDatabaseName("ix_online_payments_payment_record_id");

                    b.ToTable("online_payments", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.OtherExpenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("ExpenseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("expense_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_other_expenses");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_other_expenses_added_by");

                    b.ToTable("other_expenses", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.OwnersAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "arcana_hilo_sequence");

                    b.Property<string>("Barangay")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("barangay");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("house_number");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("province");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("street_name");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.PaymentRecords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_payment_records");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_payment_records_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_payment_records_modified_by");

                    b.ToTable("payment_records", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.PaymentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_no");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bank_name");

                    b.Property<decimal>("ChequeAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cheque_amount");

                    b.Property<DateTime>("ChequeDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("cheque_date");

                    b.Property<string>("ChequeNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cheque_no");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_received");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("OnlinePlatform")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("online_platform");

                    b.Property<string>("Payee")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payee");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("payment_amount");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payment_method");

                    b.Property<int>("PaymentRecordId")
                        .HasColumnType("int")
                        .HasColumnName("payment_record_id");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reference_no");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmountReceived")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount_received");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.Property<string>("WithholdingAttachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("withholding_attachment");

                    b.Property<DateTime>("WithholdingDateReceived")
                        .HasColumnType("datetime2")
                        .HasColumnName("withholding_date_received");

                    b.HasKey("Id")
                        .HasName("pk_payment_transactions");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_payment_transactions_added_by");

                    b.HasIndex("PaymentRecordId")
                        .HasDatabaseName("ix_payment_transactions_payment_record_id");

                    b.HasIndex("TransactionId")
                        .HasDatabaseName("ix_payment_transactions_transaction_id");

                    b.ToTable("payment_transactions", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.PriceMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("PriceModeCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("price_mode_code");

                    b.Property<string>("PriceModeDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("price_mode_description");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_price_mode");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_price_mode_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_price_mode_modified_by");

                    b.ToTable("price_mode", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.PriceModeItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<int>("PriceModeId")
                        .HasColumnType("int")
                        .HasColumnName("price_mode_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_price_mode_items");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_price_mode_items_added_by");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_price_mode_items_item_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_price_mode_items_modified_by");

                    b.HasIndex("PriceModeId")
                        .HasDatabaseName("ix_price_mode_items_price_mode_id");

                    b.ToTable("price_mode_items", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modified_by");

                    b.Property<string>("ProductCategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_category_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_categories");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_product_categories_added_by");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modified_by");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("product_category_id");

                    b.Property<string>("ProductSubCategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_sub_category_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_sub_categories");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_product_sub_categories_added_by");

                    b.HasIndex("ProductCategoryId")
                        .HasDatabaseName("ix_product_sub_categories_product_category_id");

                    b.ToTable("product_sub_categories", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CurrentApproverId")
                        .HasColumnType("int")
                        .HasColumnName("current_approver_id");

                    b.Property<string>("Module")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("module");

                    b.Property<int?>("NextApproverId")
                        .HasColumnType("int")
                        .HasColumnName("next_approver_id");

                    b.Property<int>("RequestorId")
                        .HasColumnType("int")
                        .HasColumnName("requestor_id");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_requests");

                    b.HasIndex("CurrentApproverId")
                        .HasDatabaseName("ix_requests_current_approver_id");

                    b.HasIndex("NextApproverId")
                        .HasDatabaseName("ix_requests_next_approver_id");

                    b.HasIndex("RequestorId")
                        .HasDatabaseName("ix_requests_requestor_id");

                    b.ToTable("requests", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.RequestApprovers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApproverId")
                        .HasColumnType("int")
                        .HasColumnName("approver_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.HasKey("Id")
                        .HasName("pk_request_approvers");

                    b.HasIndex("ApproverId")
                        .HasDatabaseName("ix_request_approvers_approver_id");

                    b.HasIndex("RequestId")
                        .HasDatabaseName("ix_request_approvers_request_id");

                    b.ToTable("request_approvers", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.SpecialDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("discount");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsOneTime")
                        .HasColumnType("bit")
                        .HasColumnName("is_one_time");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_special_discounts");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_special_discounts_added_by");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_special_discounts_client_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_special_discounts_modified_by");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasDatabaseName("ix_special_discounts_request_id");

                    b.ToTable("special_discounts", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.StoreType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("StoreTypeName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("store_type_name");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_store_types");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_store_types_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_store_types_modified_by");

                    b.ToTable("store_types", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TermDays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<int>("Days")
                        .HasColumnType("int")
                        .HasColumnName("days");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_term_days");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_term_days_added_by");

                    b.ToTable("term_days", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TermOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "arcana_hilo_sequence");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<int?>("ClientsId")
                        .HasColumnType("int")
                        .HasColumnName("clients_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreditLimit")
                        .HasColumnType("int")
                        .HasColumnName("credit_limit");

                    b.Property<int?>("TermDaysId")
                        .HasColumnType("int")
                        .HasColumnName("term_days_id");

                    b.Property<int>("TermsId")
                        .HasColumnType("int")
                        .HasColumnName("terms_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_term_options");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_term_options_added_by");

                    b.HasIndex("ClientsId")
                        .HasDatabaseName("ix_term_options_clients_id");

                    b.HasIndex("TermDaysId")
                        .HasDatabaseName("ix_term_options_term_days_id");

                    b.HasIndex("TermsId")
                        .HasDatabaseName("ix_term_options_terms_id");

                    b.ToTable("term_options", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Terms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("TermType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("term_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_terms");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_terms_added_by");

                    b.ToTable("terms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = 1,
                            CreatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3938),
                            IsActive = true,
                            TermType = "COD",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AddedBy = 1,
                            CreatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3956),
                            IsActive = true,
                            TermType = "1 Up 1 Down",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AddedBy = 1,
                            CreatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3958),
                            IsActive = true,
                            TermType = "Credit Type",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TransactionItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unit_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_transaction_items");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_transaction_items_added_by");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_transaction_items_item_id");

                    b.HasIndex("TransactionId")
                        .HasDatabaseName("ix_transaction_items_transaction_id");

                    b.ToTable("transaction_items", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TransactionSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AddVat")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("add_vat");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount_due");

                    b.Property<string>("ChargeInvoiceNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("charge_invoice_no");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("discount");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("discount_amount");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<decimal>("RemainingBalance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("remaining_balance");

                    b.Property<decimal>("SpecialDiscount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("special_discount");

                    b.Property<decimal>("SpecialDiscountAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("special_discount_amount");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("TotalAmountDue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_amount_due");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_sales");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("vat_amount");

                    b.Property<decimal>("VatExemptSales")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("vat_exempt_sales");

                    b.Property<decimal>("VatableSales")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("vatable_sales");

                    b.Property<decimal>("ZeroRatedSales")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("zero_rated_sales");

                    b.HasKey("Id")
                        .HasName("pk_transaction_sales");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_transaction_sales_added_by");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasDatabaseName("ix_transaction_sales_transaction_id");

                    b.ToTable("transaction_sales", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<string>("ChargeInvoice")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("charge_invoice");

                    b.Property<DateTime>("ChargeInvoiceDateReceived")
                        .HasColumnType("datetime2")
                        .HasColumnName("charge_invoice_date_received");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<string>("SalesInvoice")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sales_invoice");

                    b.Property<DateTime>("SalesInvoiceDateReceived")
                        .HasColumnType("datetime2")
                        .HasColumnName("sales_invoice_date_received");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_transactions_added_by");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_transactions_client_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Uom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modified_by");

                    b.Property<string>("UomCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uom_code");

                    b.Property<string>("UomDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uom_description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_uoms");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_uoms_added_by");

                    b.ToTable("uoms", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UpdateRequestTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("module_name");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_update_request_trails");

                    b.HasIndex("RequestId")
                        .HasDatabaseName("ix_update_request_trails_request_id");

                    b.ToTable("update_request_trails", (string)null);
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("FullIdNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_id_no");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPasswordChanged")
                        .HasColumnType("bit")
                        .HasColumnName("is_password_changed");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mobile_number");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_picture");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserRolesId")
                        .HasColumnType("int")
                        .HasColumnName("user_roles_id");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("AddedBy")
                        .IsUnique()
                        .HasDatabaseName("ix_users_added_by")
                        .HasFilter("[added_by] IS NOT NULL");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_users_company_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_users_department_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_users_location_id");

                    b.HasIndex("UserRolesId")
                        .HasDatabaseName("ix_users_user_roles_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 6, 14, 11, 22, 3, 247, DateTimeKind.Local).AddTicks(1926),
                            Fullname = "Admin",
                            IsActive = true,
                            IsPasswordChanged = false,
                            Password = "$2a$11$.iT0TEll50X79L2tSpCRRuc0Vy8sCCDxozDcB/O5HIodKIZBhAIHW",
                            UpdatedAt = new DateTime(2024, 6, 14, 11, 22, 3, 247, DateTimeKind.Local).AddTicks(1962),
                            UserRolesId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("permissions");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserRoleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_role_name");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_user_roles_added_by");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 6, 14, 11, 22, 4, 167, DateTimeKind.Local).AddTicks(3615),
                            IsActive = true,
                            Permissions = "[\"User Management\",\"User Account\",\"User Role\",\"Company\",\"Department\",\"Location\",\"Masterlist\",\"Products\",\"Meat Type\",\"UOM\",\"Discount Type\",\"Terms\",\"Customer Registration\",\"Prospect\",\"Direct\",\"Freebies\",\"Inventory\",\"Setup\",\"Product Category\",\"Product Sub Category\",\"Unit of Measurements\",\"Store Type\",\"Discount\",\"Term Days\",\"Approval\",\"Freebie Approval\",\"Direct Approval\",\"Admin Dashboard\",\"Direct Registration\",\"Listing Fee\",\"Registration Approval\",\"Sp. Discount Approval\",\"Listing Fee Approval\",\"Business Type\",\"Registration\",\"Customer Management\",\"Product Setup\",\"Variable Discount\"]",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserRoleName = "Admin"
                        });
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.VariableDiscounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSubjectToApproval")
                        .HasColumnType("bit")
                        .HasColumnName("is_subject_to_approval");

                    b.Property<decimal>("MaximumAmount")
                        .HasColumnType("decimal(18,6)")
                        .HasColumnName("maximum_amount");

                    b.Property<decimal>("MaximumPercentage")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("maximum_percentage");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("decimal(18,6)")
                        .HasColumnName("minimum_amount");

                    b.Property<decimal>("MinimumPercentage")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("minimum_percentage");

                    b.HasKey("Id")
                        .HasName("pk_variable_discounts");

                    b.ToTable("variable_discounts", (string)null);
                });

            modelBuilder.Entity("ApproverByRange", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approver_by_range_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.AdvancePayment", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_advance_payments_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_advance_payments_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_advance_payments_users_modified_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.PaymentTransaction", "PaymentTransaction")
                        .WithMany()
                        .HasForeignKey("PaymentTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_advance_payments_payment_transactions_payment_transaction_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Client");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PaymentTransaction");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Approval", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "Approver")
                        .WithMany("Approvals")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approval_users_approver_id");

                    b.HasOne("RDF.Arcana.API.Domain.Request", "Request")
                        .WithMany("Approvals")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approval_requests_request_id");

                    b.Navigation("Approver");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Approver", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "User")
                        .WithMany("Approver")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approvers_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.BookingCoverages", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_booking_coverages_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.CdoCluster", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Cluster", "Cluster")
                        .WithMany("CdoClusters")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cdo_clusters_clusters_cluster_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "User")
                        .WithOne("CdoCluster")
                        .HasForeignKey("RDF.Arcana.API.Domain.CdoCluster", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cdo_clusters_users_user_id");

                    b.Navigation("Cluster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ClearedPayments", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cleared_payments_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_cleared_payments_users_modified_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.PaymentRecords", "PaymentRecord")
                        .WithOne("ClearedPayments")
                        .HasForeignKey("RDF.Arcana.API.Domain.ClearedPayments", "PaymentRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cleared_payments_payment_records_payment_record_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PaymentRecord");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ClientDocuments", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Clients")
                        .WithMany("ClientDocuments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_documents_clients_clients_id");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ClientModeOfPayment", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Client")
                        .WithMany("ClientModeOfPayment")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_mode_of_payments_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.ModeOfPayment", "ModeOfPayment")
                        .WithMany("ClientModeOfPayments")
                        .HasForeignKey("ModeOfPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_mode_of_payments_mode_of_payments_mode_of_payment_id");

                    b.Navigation("Client");

                    b.Navigation("ModeOfPayment");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Clients", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany("Clients")
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.BookingCoverages", "BookingCoverages")
                        .WithMany()
                        .HasForeignKey("BookingCoverageId")
                        .HasConstraintName("fk_clients_booking_coverages_booking_coverages_id");

                    b.HasOne("RDF.Arcana.API.Domain.BusinessAddress", "BusinessAddress")
                        .WithMany()
                        .HasForeignKey("BusinessAddressId")
                        .HasConstraintName("fk_clients_business_address_business_address_id");

                    b.HasOne("RDF.Arcana.API.Domain.Cluster", "Cluster")
                        .WithMany()
                        .HasForeignKey("ClusterId")
                        .HasConstraintName("fk_clients_clusters_cluster_id");

                    b.HasOne("RDF.Arcana.API.Domain.FixedDiscounts", "FixedDiscounts")
                        .WithMany()
                        .HasForeignKey("FixedDiscountId")
                        .HasConstraintName("fk_clients_fixed_discounts_fixed_discounts_id");

                    b.HasOne("RDF.Arcana.API.Domain.Freezer", "Freezer")
                        .WithMany()
                        .HasForeignKey("FreezerId")
                        .HasConstraintName("fk_clients_freezers_freezer_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_clients_users_modified_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.OwnersAddress", "OwnersAddress")
                        .WithMany()
                        .HasForeignKey("OwnersAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_address_owners_address_id");

                    b.HasOne("RDF.Arcana.API.Domain.PriceMode", "PriceMode")
                        .WithMany("Clients")
                        .HasForeignKey("PriceModeId")
                        .HasConstraintName("fk_clients_price_mode_price_mode_id");

                    b.HasOne("RDF.Arcana.API.Domain.Request", "Request")
                        .WithOne("Clients")
                        .HasForeignKey("RDF.Arcana.API.Domain.Clients", "RequestId")
                        .HasConstraintName("fk_clients_requests_request_id");

                    b.HasOne("RDF.Arcana.API.Domain.StoreType", "StoreType")
                        .WithMany()
                        .HasForeignKey("StoreTypeId")
                        .HasConstraintName("fk_clients_store_types_store_type_id");

                    b.HasOne("RDF.Arcana.API.Domain.TermOptions", "Term")
                        .WithMany()
                        .HasForeignKey("Terms")
                        .HasConstraintName("fk_clients_term_options_term_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("BookingCoverages");

                    b.Navigation("BusinessAddress");

                    b.Navigation("Cluster");

                    b.Navigation("FixedDiscounts");

                    b.Navigation("Freezer");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("OwnersAddress");

                    b.Navigation("PriceMode");

                    b.Navigation("Request");

                    b.Navigation("StoreType");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Company", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Company", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_companies_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Department", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Department", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departments_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Discount", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Discount", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discounts_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Expenses", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expenses_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Client")
                        .WithMany("Expenses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expenses_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_expenses_users_modified_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Request", "Request")
                        .WithOne("Expenses")
                        .HasForeignKey("RDF.Arcana.API.Domain.Expenses", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expenses_requests_request_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Client");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ExpensesRequest", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Expenses", "Expenses")
                        .WithMany("ExpensesRequests")
                        .HasForeignKey("ExpensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expenses_requests_expenses_expenses_id");

                    b.HasOne("RDF.Arcana.API.Domain.OtherExpenses", "OtherExpense")
                        .WithMany()
                        .HasForeignKey("OtherExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expenses_requests_other_expenses_other_expense_id");

                    b.Navigation("Expenses");

                    b.Navigation("OtherExpense");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FreebieItems", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.FreebieRequest", "FreebieRequest")
                        .WithMany("FreebieItems")
                        .HasForeignKey("FreebieRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_freebie_items_freebie_requests_freebie_request_id");

                    b.HasOne("RDF.Arcana.API.Domain.Items", "Items")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_freebie_items_items_item_id");

                    b.Navigation("FreebieRequest");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FreebieRequest", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Clients")
                        .WithMany("FreebiesRequests")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_freebie_requests_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.Request", "Request")
                        .WithOne("FreebieRequest")
                        .HasForeignKey("RDF.Arcana.API.Domain.FreebieRequest", "RequestId")
                        .HasConstraintName("fk_freebie_requests_requests_request_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "RequestedByUser")
                        .WithMany("FreebieRequests")
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_freebie_requests_users_requested_by_user_id");

                    b.Navigation("Clients");

                    b.Navigation("Request");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ItemPriceChange", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.PriceModeItems", "PriceModeItem")
                        .WithMany("ItemPriceChanges")
                        .HasForeignKey("PriceModeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_price_changes_price_mode_items_price_mode_item_id");

                    b.Navigation("PriceModeItem");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Items", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Items", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_users_added_by");

                    b.HasOne("RDF.Arcana.API.Domain.MeatType", "MeatType")
                        .WithMany()
                        .HasForeignKey("MeatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_meat_types_meat_type_id");

                    b.HasOne("RDF.Arcana.API.Domain.ProductSubCategory", "ProductSubCategory")
                        .WithMany()
                        .HasForeignKey("ProductSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_product_sub_categories_product_sub_category_id");

                    b.HasOne("RDF.Arcana.API.Domain.Uom", "Uom")
                        .WithMany("Items")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_uoms_uom_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("MeatType");

                    b.Navigation("ProductSubCategory");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ListingFee", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Client")
                        .WithMany("ListingFees")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_listing_fees_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.Request", "Request")
                        .WithOne("ListingFee")
                        .HasForeignKey("RDF.Arcana.API.Domain.ListingFee", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_listing_fees_requests_request_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "RequestedByUser")
                        .WithMany("ListingFees")
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_listing_fees_users_requested_by_user_id");

                    b.Navigation("Client");

                    b.Navigation("Request");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ListingFeeItems", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Items", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_listing_fee_items_items_item_id");

                    b.HasOne("RDF.Arcana.API.Domain.ListingFee", "ListingFee")
                        .WithMany("ListingFeeItems")
                        .HasForeignKey("ListingFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_listing_fee_items_listing_fees_listing_fee_id");

                    b.Navigation("Item");

                    b.Navigation("ListingFee");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Location", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Location", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.MeatType", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.MeatType", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meat_types_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ModeOfPayment", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mode_of_payments_users_added_by_user_id");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Notification", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_notifications_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.OnlinePayment", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_online_payments_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_online_payments_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_online_payments_users_modified_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.PaymentRecords", "PaymentRecord")
                        .WithMany()
                        .HasForeignKey("PaymentRecordId")
                        .HasConstraintName("fk_online_payments_payment_records_payment_record_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Client");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PaymentRecord");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.OtherExpenses", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_other_expenses_users_added_by_user_id");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.PaymentRecords", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payment_records_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_payment_records_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.PaymentTransaction", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payment_transactions_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.PaymentRecords", "PaymentRecord")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("PaymentRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payment_transactions_payment_records_payment_record_id");

                    b.HasOne("RDF.Arcana.API.Domain.Transactions", "Transaction")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payment_transactions_transactions_transaction_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("PaymentRecord");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.PriceMode", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_mode_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_price_mode_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.PriceModeItems", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_mode_items_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Items", "Item")
                        .WithMany("PriceModeItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_mode_items_items_item_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_price_mode_items_users_modified_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.PriceMode", "PriceMode")
                        .WithMany()
                        .HasForeignKey("PriceModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_mode_items_price_mode_price_mode_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Item");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PriceMode");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductCategory", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.ProductCategory", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_categories_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductSubCategory", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.ProductSubCategory", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_sub_categories_users_added_by");

                    b.HasOne("RDF.Arcana.API.Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductSubCategory")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_sub_categories_product_categories_product_category_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Request", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "CurrentApprover")
                        .WithMany("ApproverRequests")
                        .HasForeignKey("CurrentApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requests_users_current_approver_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "NextApprover")
                        .WithMany()
                        .HasForeignKey("NextApproverId")
                        .HasConstraintName("fk_requests_users_next_approver_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "Requestor")
                        .WithMany("RequesterRequests")
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requests_users_requestor_id");

                    b.Navigation("CurrentApprover");

                    b.Navigation("NextApprover");

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.RequestApprovers", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_request_approvers_users_approver_id");

                    b.HasOne("RDF.Arcana.API.Domain.Request", "Request")
                        .WithMany("RequestApprovers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_request_approvers_requests_request_id");

                    b.Navigation("Approver");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.SpecialDiscount", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_special_discounts_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Client")
                        .WithMany("SpecialDiscounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_special_discounts_clients_client_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_special_discounts_users_modified_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Request", "Request")
                        .WithOne("SpecialDiscount")
                        .HasForeignKey("RDF.Arcana.API.Domain.SpecialDiscount", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_special_discounts_requests_request_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Client");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.StoreType", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("fk_store_types_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("fk_store_types_users_modified_by");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TermDays", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.TermDays", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_term_days_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TermOptions", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_term_options_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Clients")
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .HasConstraintName("fk_term_options_clients_clients_id");

                    b.HasOne("RDF.Arcana.API.Domain.TermDays", "TermDays")
                        .WithMany()
                        .HasForeignKey("TermDaysId")
                        .HasConstraintName("fk_term_options_term_days_term_days_id");

                    b.HasOne("RDF.Arcana.API.Domain.Terms", "Terms")
                        .WithMany("TermOptions")
                        .HasForeignKey("TermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_term_options_terms_terms_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Clients");

                    b.Navigation("TermDays");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Terms", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_terms_users_added_by_user_id");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TransactionItems", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transaction_items_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Items", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transaction_items_items_item_id");

                    b.HasOne("RDF.Arcana.API.Domain.Transactions", "Transaction")
                        .WithMany("TransactionItems")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transaction_items_transactions_transaction_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Item");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.TransactionSales", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transaction_sales_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Transactions", "Transaction")
                        .WithOne("TransactionSales")
                        .HasForeignKey("RDF.Arcana.API.Domain.TransactionSales", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transaction_sales_transactions_transaction_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Transactions", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_users_added_by_user_id");

                    b.HasOne("RDF.Arcana.API.Domain.Clients", "Client")
                        .WithMany("Transactions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_clients_client_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Uom", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.Uom", "AddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_uoms_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UpdateRequestTrail", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.Request", "Request")
                        .WithMany("UpdateRequestTrails")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("fk_update_request_trails_requests_request_id");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.User", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithOne()
                        .HasForeignKey("RDF.Arcana.API.Domain.User", "AddedBy")
                        .HasConstraintName("fk_users_users_added_by");

                    b.HasOne("RDF.Arcana.API.Domain.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_users_companies_company_id");

                    b.HasOne("RDF.Arcana.API.Domain.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_users_departments_department_id");

                    b.HasOne("RDF.Arcana.API.Domain.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_users_locations_location_id");

                    b.HasOne("RDF.Arcana.API.Domain.UserRoles", "UserRoles")
                        .WithMany("Users")
                        .HasForeignKey("UserRolesId")
                        .HasConstraintName("fk_users_user_roles_user_roles_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Location");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UserRoles", b =>
                {
                    b.HasOne("RDF.Arcana.API.Domain.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("fk_user_roles_users_added_by");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Clients", b =>
                {
                    b.Navigation("ClientDocuments");

                    b.Navigation("ClientModeOfPayment");

                    b.Navigation("Expenses");

                    b.Navigation("FreebiesRequests");

                    b.Navigation("ListingFees");

                    b.Navigation("SpecialDiscounts");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Cluster", b =>
                {
                    b.Navigation("CdoClusters");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Expenses", b =>
                {
                    b.Navigation("ExpensesRequests");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.FreebieRequest", b =>
                {
                    b.Navigation("FreebieItems");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Items", b =>
                {
                    b.Navigation("PriceModeItems");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ListingFee", b =>
                {
                    b.Navigation("ListingFeeItems");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Location", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ModeOfPayment", b =>
                {
                    b.Navigation("ClientModeOfPayments");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.PaymentRecords", b =>
                {
                    b.Navigation("ClearedPayments");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.PriceMode", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.PriceModeItems", b =>
                {
                    b.Navigation("ItemPriceChanges");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.ProductCategory", b =>
                {
                    b.Navigation("ProductSubCategory");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Request", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Clients");

                    b.Navigation("Expenses");

                    b.Navigation("FreebieRequest");

                    b.Navigation("ListingFee");

                    b.Navigation("RequestApprovers");

                    b.Navigation("SpecialDiscount");

                    b.Navigation("UpdateRequestTrails");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Terms", b =>
                {
                    b.Navigation("TermOptions");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Transactions", b =>
                {
                    b.Navigation("PaymentTransactions");

                    b.Navigation("TransactionItems");

                    b.Navigation("TransactionSales");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.Uom", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.User", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Approver");

                    b.Navigation("ApproverRequests");

                    b.Navigation("CdoCluster");

                    b.Navigation("Clients");

                    b.Navigation("FreebieRequests");

                    b.Navigation("ListingFees");

                    b.Navigation("RequesterRequests");
                });

            modelBuilder.Entity("RDF.Arcana.API.Domain.UserRoles", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
